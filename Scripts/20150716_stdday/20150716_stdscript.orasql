-- SYS user
GRANT CREATE SYNONYM TO scott;
GRANT CREATE ANY VIEW TO scott;
GRANT SELECT ON v_$statname TO scott;
GRANT SELECT ON v_$mystat TO scott;
GRANT SELECT ON v_$latch TO scott;

-- create synonym in scott
CREATE SYNONYM v$statname FOR SYS.v_$statname;
CREATE SYNONYM v$mystat FOR SYS.v_$mystat;
CREATE SYNONYM v$latch FOR SYS.v_$latch;
CREATE SYNONYM v$timer FOR SYS.v_$timer;

-- create view in scott
CREATE OR REPLACE VIEW STATS
AS
SELECT 'STAT....' || a.name NAME, b.value
  FROM v$statname a, v$mystat b
 WHERE a.statistic# = b.statistic#
UNION ALL
SELECT 'LATCH.' || NAME, gets
  FROM v$latch
UNION ALL
SELECT 'STAT...Elapsed Time', hsecs
  FROM v$timer;

-- create global temporary table
CREATE GLOBAL TEMPORARY TABLE run_stats
(
  runid VARCHAR2(25),
  NAME  VARCHAR2(80),
  VALUE NUMBER(10)
)
ON COMMIT PRESERVE ROWS;  

-- create package
CREATE OR REPLACE PACKAGE runstats_pkg
AS
  PROCEDURE rs_start;
  PROCEDURE rs_middle;
  PROCEDURE rs_stop(p_difference_threshold IN NUMBER DEFAULT 0);
END;
/  

-- create package body
CREATE OR REPLACE PACKAGE BODY runstats_pkg
AS
  g_start NUMBER;
  g_run1  NUMBER;
  g_run2  NUMBER;
PROCEDURE rs_start
IS
BEGIN
  EXECUTE IMMEDIATE 'truncate table run_stats;';

  INSERT INTO run_stats(runid, name, VALUE)
  SELECT 'before', STATS.* FROM STATS;

  g_start := dbms_utility.get_cpu_time;
END;

PROCEDURE rs_middle
IS
BEGIN
  g_run1 := (dbms_utility.get_cpu_time - g_start);

  INSERT INTO run_stats(runid, name, VALUE)
  SELECT 'after 1', STATS.* FROM STATS;

  g_start := dbms_utility.get_cpu_time;
END;

PROCEDURE rs_stop(p_difference_threshold IN NUMBER DEFAULT 0)
IS
BEGIN
  g_run2 := (dbms_utility.get_cpu_time - g_start);

  dbms_output.put_line
  ('Run1 ran in ' || g_run1 || ' cpu hsecs');
  dbms_output.put_line
  ('Run2 ran in ' || g_run2 || ' cpu hsecs');
  IF(g_run2 <> 0) THEN
    dbms_output.put_line
    ('run 1 ran in ' || round(g_run1/g_run2*100, 2) ||
     '% of the time');
  END IF;
  dbms_output.put_line(CHR(9));

  INSERT INTO run_stats(runid, NAME, VALUE)
  SELECT 'after 2', STATS.* FROM STATS;

  dbms_output.put_line(RPAD('Name', 30) || LPAD('Run1', 12) ||
                       LPAD('Run2', 12) || LPAD('Diff', 12));
  FOR x IN
    (SELECT RPAD(a.name, 30) ||
            to_char(b.value - a.value, '999,999,999') ||
            to_char(c.value - b.value, '999,999,999') ||
            to_char((c.value - b.value) - (b.value - a.value)) DATA
      FROM run_stats a, run_stats b, run_stats c
     WHERE a.name = b.name
       AND b.name = c.name
       AND a.runid = 'before'
       AND b.runid = 'after 1'
       AND c.runid = 'after 2'
       AND ABS((c.value - b.value) - (b.value - a.value)) > p_difference_threshold
     ORDER BY ABS((c.value - b.value) - (b.value - a.value)))  LOOP
     dbms_output.put_line(x.data);
   END LOOP;
  
  dbms_output.put_line(chr(9));     
  
  dbms_output.put_line('Run1 latches total versus runs -- difference and pct');
  dbms_output.put_line(lpad('Run1', 12) || lpad('Run2', 12) ||
                       lpad('Diff', 12) || lpad('Pct', 10));
  
  FOR x IN
    (SELECT to_char(run1, '999,999,999') ||
            to_char(run2, '999,999,999') ||
            to_char(diff, '999,999,999') ||
            to_char(round(decode(run2, 0, 0, run1/run2), 2), '99,999.99') || '%' data
       FROM (SELECT SUM(b.value - a.value) run1,
                    SUM(c.value - b.value) run2,
                    SUM((c.value - b.value) - (b.value - a.value)) diff
               FROM run_stats a, run_stats b, run_stats c
                    WHERE a.name = b.name
                      AND b.name = c.name
                      AND a.runid = 'before'
                      AND b.runid = 'after 1'
                      AND c.runid = 'after 2'
                      AND a.name LIKE 'LATCH%')
    
    ) LOOP 
    dbms_output.put_line(x.data);
  END LOOP;  

END;

END;
  
  
   
  
    
